- name: Install ipmctl and ndctl package to configure and monitor the persistent memory installed
  dnf:
    name: "{{ item }}"
    state: present
  with_items:
   - ipmctl
   - ndctl

- name: Create app direct regions (goal) use interleaving
  expect:
    command: "ipmctl create -goal MemoryMode=0 PersistentMemoryType=AppDirect"
    responses:
        'Do you want to continue?' : 'y'

- name: Rebooting ...
  shell: sleep 2 && /sbin/shutdown -r now "Reboot required for grub"
  async: 1
  poll: 0
  ignore_errors: true
  when: grub.changed
  register: rebooting

- name: Wait for system to become reachable
  wait_for_connection:
    timeout: 900
    sleep: 15
    delay: 30
  when: rebooting.changed

- name: Check PMem and DRAM modules installed in the system
  command: "ipmctl show -topology"
  register: show_topology

- name: Displays both the Intel Optane PMem and DRAM modules installed in the system
  debug:
    var: show_topology.stdout_lines

- name: Check Intel Optane PMem modules
  command: "ipmctl show -dimm"
  register: show_dimm

- name: Displays detailed information about the Intel Optane PMem modules
  debug:
    var: show_dimm.stdout_lines

- name: Check intel Optane PMem capacity is provisioned for the App Direct (AD) Mode and Memory Mode (MM)
  command: "ipmctl show -memoryresources"
  register: show_memory_resources

- name: Displays how the Intel Optane PMem capacity is provisioned for the App Direct (AD) Mode and Memory Mode (MM)
  debug:
    var: show_memory_resources.stdout_lines

- name: Check available region for processor and the respective numa bank of persistent memory
  command: "ipmctl show -region"
  register: show_region

- name: List the available region for processor
  debug:
    var: show_region.stdout_lines

- name: Confirm Pmem Configuration
  pause:
    prompt: Please confirm PMEM Configuration! Press return to continue. Press "c" and then "a" to abort

- name: Create App Direct Namespaces
  command: "ndctl create-namespace --mode fsdax --continue"

- name: Gathering facts
  setup:
    gather_subset:
      - hardware

- name: Output disks
  set_fact:
    pmem_disc: "{{ ansible_devices.keys() | select('match', '^pmem.*') | list  }}"


- name: Create pmem filesystem
  filesystem:
    fstype: xfs
    dev: "/dev/{{ item }}"
  with_items:
    - "{{ pmem_disc }}"


- name: Set /hana/pmem Mount Points
  mount:
    path: "/hana/pmem/{{ item }}"
    src: "/dev/{{ item }}"
    fstype: xfs
    opts: dax,nofail
    state: mounted
  with_items:
    - "{{ pmem_disc }}"

