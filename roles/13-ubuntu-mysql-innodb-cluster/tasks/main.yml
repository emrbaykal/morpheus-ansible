---
#- name: Debug inventory information
#  debug:
#    msg: 
#      - "Current inventory_hostname: {{ inventory_hostname }}"
#      - "ansible_fqdn: {{ ansible_fqdn }}"
#      - "Instance Name: {{ morpheus['instance']['hostname'] }}"
#      - "Groups defined: {{ groups.keys() | list }}"
#      - "mysql_test group exists: {{ 'mysql_test' in groups }}"
#      - "First host in mysql_test (if exists): {{ groups['mysql_test'][0] if 'mysql_test' in groups else 'Group not defined' }}"


#- name: Create Cluster Admin
#  mysql_user:
#    name: "{{admin_user}}"
#    password: "{{admin_password}}"
#    priv: '*.*:ALL,GRANT'
#    host: '%'
#    append_privs: yes
#    login_user: root
#    login_password: "{{root_password}}"
#    state: present

#- name: Delete blank users
#  mysql_query:
#    query: "DELETE FROM mysql.user WHERE User='';"
#    login_user: root
#    login_password: "{{root_password}}"

#- name: Delete test database
#  mysql_db:
#    name: test
#    state: absent
#    login_user: root
#    login_password: "{{root_password}}"

#- name: Delete references to test database
#  mysql_query:
#    query: "DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%';"
#    login_user: root
#    login_password: "{{root_password}}"

#- name: Set invisible primary key
#  mysql_query:
#    query: "SET PERSIST sql_generate_invisible_primary_key=1;"
#    login_user: root
#    login_password: "{{root_password}}"

#- name: Create MySQL InnoDB configuration file
#  copy:
#    dest: /etc/mysql/mysql.conf.d/innodb-mysqld.cnf
#    content: |
#      [mysqld]
#      bind-address = 0.0.0.0
#      max_connections = 451
#      innodb_buffer_pool_size = 6G
#      innodb_buffer_pool_instances = 6
#      innodb_use_fdatasync = ON
#      sql_generate_invisible_primary_key = 1
#      binlog_expire_logs_seconds = 604800
#      binlog_expire_logs_auto_purge = ON
#
#      [mysqldump]
#      set-gtid-purged = OFF
#    owner: root
#    group: root
#    mode: '0644'
#  notify:
#    - Restart mysql

#- name: Flush handlers
#  meta: flush_handlers

- block:
  - name: Create MySQL config file with credentials
    copy:
       dest: "/tmp/.mylogin.cnf"
       content: |
         [client]
         user={{ admin_user }}
         password={{ admin_password }}
         host={{ hostvars[inventory_hostname]['ansible_hostname'] }}
       mode: '0600'
    no_log: true

  - name: Create MySQL Shell script for instance configuration
    copy:
      dest: "/tmp/configure_instance.js"
      content: |
        // MySQL Shell script to check and configure instance
        var host = "{{ inventory_hostname }}";
        var clusterAdmin = "{{ admin_user }}";
        var password = "{{ admin_password }}";
        var dbHosts = JSON.parse('{{ groups["mysql_test"] | default([]) | to_json }}');
        var clusterName = "{{ cluster_name }}";

        function sleep(milliseconds) {
        const date = Date.now();
        let currentDate = null;
        do {
            currentDate = Date.now();
        } while (currentDate - date < milliseconds);
        }
        
        print('\nNumber of Hosts: ' + dbHosts.length );
        print('\nList of hosts:\n');

        for (var i = 0; i < dbHosts.length; i++) {
        print("Host " + i + ": " + dbHosts[i] + "\n");
        }
 
        function setupCluster() {
            print('\nConfiguring the instances.');

             for (var n = 0; n < dbHosts.length; n++) { print('\n=> ');

                shell.connect({ host: dbHosts[n], user: clusterAdmin, password: password });
                print("Connected" + dbHosts[n] + "successfully!" + "\n");
             
                print("Checking instance configuration...");
                var result = dba.checkInstanceConfiguration();

                if (result.status == "ok") {
                  print("Instance is already configured on " + dbHosts[n] + " for InnoDB Cluster usage.");
                } else {
                  print("\nConfiguring instance...");
                  var config_result = dba.configureInstance({host: dbHosts[n], user: clusterAdmin, password: password}, {restart: true})
                  print("Instance configuration result: " + JSON.stringify(config_result, null, 2));
                }
             }
              print('\nConfiguring Instances completed.\n\n');
              sleep(5000);      
              
              shell.connect({ host: host, user: clusterAdmin, password: password });
              
              try {
                  print("Setting up InnoDB Cluster on " + host + ".\n\n");
                  var cluster = dba.createCluster(clusterName);
                  print("Instance configuration result: " + JSON.stringify(cluster, null, 2));
              } catch (e) {
                  print('\nThe InnoDB cluster could not be created.\n');
                  print(e + '\n');
              }

              print('Adding instances to the cluster.\n');

              for (var i = 0; i < dbHosts.length; i++) { print('\n=> ');

                 try {
                     print("Adding instance " + dbHosts[i] + " to the cluster." + "\n");
                     add_cluster = cluster.addInstance({dbHosts[i]:3306})
                     print("\n" + "Instance " + dbHosts[i] + " successfully added to the cluster." + "\n");
                  } catch (e) {
                      print('\nThe Instabce could not be addet to the cluster.\n');
                      print(e + '\n');
                  }

              }


          }

            setupCluster();
 
      mode: '0600'
    no_log: true

  - name: Execute MySQL Shell configuration script
    shell: >
       mysqlsh --defaults-file=/tmp/.mylogin.cnf --no-wizard --js --file=/tmp/configure_instance.js
    register: mysqlsh_output
    failed_when: mysqlsh_output.rc != 0

  - name: Display MySQL Shell output
    debug:
      var: mysqlsh_output.stdout_lines

  #- name: Clean up temporary files
  #  file:
  #    path: "{{ item }}"
  #    state: absent
  #  with_items:
  #    - "/tmp/configure_instance.js"
  #    - "/tmp/.mylogin.cnf"
  #  no_log: true

  when: morpheus['instance']['name'] == ansible_hostname


#- name: Create MySQL Shell script for instance configuration
#  copy:
#    dest: "/tmp/configure_instance.js"
#    content: |
#      // MySQL Shell script to check and configure instance
#      var host = "{{ hostvars[inventory_hostname]['ansible_hostname'] }}";
#      var clusterAdmin = "{{ admin_user }}";
#      var password = "{{ admin_password }}";
#      var connectionString = clusterAdmin + "@" + host + ":3306";
#
#
#      // Use try/catch for better error handling
#      try {
#        // Connect first with explicit credentials
#        print("Connecting to instance...");
#        shell.connect({
#          host: host,
#          user: clusterAdmin, 
#          password: password
#        });
#        
#        print("Connected successfully!");
#        
#        print("Checking instance configuration...");
#        var result = dba.checkInstanceConfiguration();
#        print("Instance check result: " + JSON.stringify(result, null, 2));
#        
#        if (result.status == "ok") {
#          print("Instance is already configured for InnoDB Cluster usage.");
#        } else {
#          print("\nConfiguring instance...");
#          var config_result = dba.configureInstance();
#          print("Instance configuration result: " + JSON.stringify(config_result, null, 2));
#        }
#      } catch(e) {
#        print("ERROR: " + e.message);
#        // Exit with error code for Ansible to detect failure
#        os.exit(1);
#      }
#    mode: '0600'
#  no_log: true

#- name: Create MySQL config file with credentials
#  copy:
#    dest: "/tmp/.mylogin.cnf"
#    content: |
#      [client]
#      user={{ admin_user }}
#      password={{ admin_password }}
#      host={{ hostvars[inventory_hostname]['ansible_hostname'] }}
#    mode: '0600'
#  no_log: true

#- name: Execute MySQL Shell configuration script
#  shell: >
#    mysqlsh --defaults-file=/tmp/.mylogin.cnf --no-wizard --js --file=/tmp/configure_instance.js
#  register: mysqlsh_output
#  failed_when: mysqlsh_output.rc != 0

#- name: Display MySQL Shell output
#  debug:
#    var: mysqlsh_output.stdout_lines

#- name: Restart mysql
#  service:
#    name: mysql
#    state: restarted


