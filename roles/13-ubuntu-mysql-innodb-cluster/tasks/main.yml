---
- name: Create Cluster Admin
  mysql_user:
    #name: "{{admin_user}}"
    #password: "{{admin_password}}"
    name: "{{ morpheus['customOptions']['innodb_admin_user'] }}"
    password: "{{ morpheus['customOptions']['innodb_admin_password'] }}"
    priv: '*.*:ALL,GRANT'
    host: '%'
    append_privs: yes
    login_user: root
    #login_password: "{{root_password}}"
    login_password: "{{ morpheus['customOptions']['mysql_root_password'] }}"
    state: present

- name: Delete blank users
  mysql_query:
    query: "DELETE FROM mysql.user WHERE User='';"
    login_user: root
    login_password: "{{ morpheus['customOptions']['mysql_root_password'] }}"

- name: Delete test database
  mysql_db:
    name: test
    state: absent
    login_user: root
    login_password: "{{ morpheus['customOptions']['mysql_root_password'] }}"

- name: Delete references to test database
  mysql_query:
    query: "DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%';"
    login_user: root
    login_password: "{{ morpheus['customOptions']['mysql_root_password'] }}"

- name: Set invisible primary key
  mysql_query:
    query: "SET PERSIST sql_generate_invisible_primary_key=1;"
    login_user: root
    login_password: "{{ morpheus['customOptions']['mysql_root_password'] }}"

- name: Create MySQL InnoDB configuration file
  copy:
    dest: /etc/mysql/mysql.conf.d/innodb-mysqld.cnf
    content: |
      [mysqld]
      bind-address = 0.0.0.0
      max_connections = 451
      innodb_buffer_pool_size = 6G
      innodb_buffer_pool_instances = 6
      innodb_use_fdatasync = ON
      sql_generate_invisible_primary_key = 1
      binlog_expire_logs_seconds = 604800
      binlog_expire_logs_auto_purge = ON

      [mysqldump]
      set-gtid-purged = OFF
    owner: root
    group: root
    mode: '0644'
  notify:
    - Restart mysql

- name: Flush handlers
  meta: flush_handlers

- block:
  - name: Pause for 30 seconds to build InnoDB Cluster
    pause:
      seconds: 30

  - name: Create MySQL config file with credentials
    copy:
       dest: "/tmp/.mylogin.cnf"
       content: |
         [client]
         user={{ morpheus['customOptions']['innodb_admin_user'] }}
         password={{ morpheus['customOptions']['innodb_admin_password'] }}
         host={{ hostvars[inventory_hostname]['ansible_hostname'] }}
       mode: '0600'
    no_log: true

  - name: Create MySQL Shell script for instance configuration
    copy:
      dest: "/tmp/configure_instance.js"
      content: |
        // MySQL Shell script to check and configure instance
        var host = "{{ inventory_hostname }}";
        var clusterAdmin = "{{ morpheus['customOptions']['innodb_admin_user'] }}";
        var password = "{{ morpheus['customOptions']['innodb_admin_password'] }}";
        var dbHosts = JSON.parse('{{ groups[{ morpheus['customOptions']['ansibe_group'] }] | default([]) | to_json }}');
        var clusterName = "{{ morpheus['customOptions']['innodb_cls_name'] }}";

        function sleep(milliseconds) {
        const date = Date.now();
        let currentDate = null;
        do {
            currentDate = Date.now();
        } while (currentDate - date < milliseconds);
        }
        
        print('\nNumber of Hosts: ' + dbHosts.length );
        print('\nList of hosts:\n');

        for (var i = 0; i < dbHosts.length; i++) {
        print("Host " + i + ": " + dbHosts[i] + "\n");
        }
 
        function setupCluster() {
            print('\nConfiguring the instances.');

             for (var n = 0; n < dbHosts.length; n++) { print('\n=> ');

                shell.connect({ host: dbHosts[n], user: clusterAdmin, password: password });
                print("Connected" + dbHosts[n] + "successfully!" + "\n");
             
                print("Checking instance configuration...");
                var result = dba.checkInstanceConfiguration();

                if (result.status == "ok") {
                  print("Instance is already configured on " + dbHosts[n] + " for InnoDB Cluster usage.");
                } else {
                  print("\nConfiguring instance...");
                  var config_result = dba.configureInstance({host: dbHosts[n], user: clusterAdmin, password: password}, {restart: true})
                  print("Instance configuration result: " + JSON.stringify(config_result, null, 2));
                }
             }
              print('\nConfiguring Instances completed.\n\n');
              sleep(5000);      
              
              print("Connecting to primary node: " + host);
              shell.connect({ host: host, user: clusterAdmin, password: password });
              

              // Now create cluster on primary node
              try {
                  print("Setting up InnoDB Cluster on " + host + ".\n\n");
                  var cluster = dba.createCluster(clusterName);
                  print("Instance configuration result: " + JSON.stringify(cluster, null, 2));
              } catch (e) {
                  print('\nThe InnoDB cluster could not be created.\n');
                  print(e + '\n');
              }

              print('Adding instances to the cluster.\n');

              cluster = dba.getCluster();

              for (var i = 0; i < dbHosts.length; i++) { print('\n=> ');
                 // Skip the primary node - it's already in the cluster
                 if (dbHosts[i] === host) {
                     print("Skipping primary node " + host);
                     continue;
                 }

                 try {
                     print("Adding instance " + dbHosts[i] + " to the cluster." + "\n");
                     add_cluster = cluster.addInstance(dbHosts[i], {recoveryMethod: 'clone'});
                     print("\nInstance " + dbHosts[i] + " successfully added to the cluster.");
                  } catch (e) {
                      print('\nThe Instabce could not be addet to the cluster.\n');
                      print(e + '\n');
                  }

              }


          }

            setupCluster();
 
      mode: '0600'
    no_log: true

  - name: Execute MySQL Shell configuration script
    shell: >
       mysqlsh --defaults-file=/tmp/.mylogin.cnf --no-wizard --js --file=/tmp/configure_instance.js
    register: mysqlsh_output
    failed_when: mysqlsh_output.rc != 0

  - name: Display MySQL Shell output
    debug:
      var: mysqlsh_output.stdout_lines

  - name: Clean up temporary files
    file:
      path: "{{ item }}"
      state: absent
    with_items:
      - "/tmp/configure_instance.js"
      - "/tmp/.mylogin.cnf"
    no_log: true

  when: morpheus['instance']['name'] == ansible_hostname

